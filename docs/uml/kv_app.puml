@startuml


' std::vector<int> a(10); SArray<int> b(a);  // copying
' std::shared_ptr<std::vector<int>> c(new std::vector<int>(10));
' SArray<int> d(c);  // only pointer copying
object SArray {
    - size_: size_t
    - capacity: size_t
    - ptr_: shared_ptr<V>

    + SArray: (const SArray<W>&)
    + operator=: void(const SArray<W>&)

    + CopyFrom(const V* data, size_t size)
    + segement: SArray<V>(begin, end)
    + append: void(const SArray<V>&)
    + pop_back: void()
    + push_back(const V& val)
    + other funcs in vector

}

object KVPairs {
    keys: SArray<key>
    vals: SArray<Val>
    lens: SArray<int>
}


abstract SimpleApp {
    - request_handle_: Handle
    - response_handle_: Handle

    # obj_: Customer*
    # Process: void(const Message& Msg)

    + Request: int(int req_head, std::string& req_body, int recv_id)
    + Wait: void(int timestamp)
    + Response: void(const SimpleData& recv_req, const std::string& res_body)
    + set_request_handle: void(const Handle&)
    + set_response_handle: void(const Handle&)
    + get_customer: Customer*()
}

SimpleApp <|-- KVWorker
SimpleApp <|-- KVServer

class KVWorker {
    - recv_kvs: unordered_map<int, vector<KVPairs<Val>>>
    - callbacks_: unordered_map<int, Callback>
    - mu_: mutex
    - slicer_: Slicer

    - Pull_(keys, vals, lens, cmd, cb)
    - AddCallbck(timestamp, cb)
    - RunCallback(timestamp)
    - Send: void(timestamp, push, cmd, kvs)
    - Process: void(const Message& msg)
    - DefaultSlicer: void(const KVPairs<Val>& send, const vector<Range>& ranges, SlicedKVs* sliced)


    + Push: int(keys, vals, lens, cmd, cb)
    + Pull: int(keys, vals, lens, cmd, cb)
    + Wait: void(timestamp)
    + ZPush: int(keys, vals, lens, cmd, cb) // zero-copy Push
    + ZPull: int(keys, vals, lens, cmd, cb) // zero-copy Pull
    + set_slicer: void(const Slicer& slicer)
}

object KVMeta {
    cmd: int
    push: bool
    sender: int
    timestamp: int
    customer_id: int
}

class KVServer {
    - Process: void(const Message& msg)
    + Response: void(const KVMeta& req, const KVPairs<Val>& res)
}

@enduml